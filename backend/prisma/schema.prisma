datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  username        String?     @unique
  email           String      @unique
  password        String
  firstname       String?
  lastname        String?
  bio             String?
  website         String?
  gender          String?
  calendar        String?
  country         String?
  city            String?
  profileImageUrl String?
  socialMedia     Json?
  skills          Json?
  createdAt       DateTime    @default(now())
  posts           Post[]
  comments        Comment[]
  work            Work[]
  likes           Like[]
  followers       Follow[]    @relation("UserFollowers")
  following       Follow[]    @relation("UserFollowing")
  jobs            Job[]
  projects        Project[]
  education       Education[]
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
  content   String
  createdAt DateTime  @default(now())
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@unique([postId, userId])
}

model Follow {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  follower   User     @relation("UserFollowers", fields: [followerId], references: [id])
  followerId String   @db.ObjectId
  followee   User     @relation("UserFollowing", fields: [followeeId], references: [id])
  followeeId String   @db.ObjectId
  createdAt  DateTime @default(now())

  @@unique([followerId, followeeId])
}

model Job {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  title       String
  description String
  location    String?
  salary      String?
  company     String
  createdAt   DateTime @default(now())
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  title       String
  tagline     String
  description String?
  projectLink String?
  opensource  Boolean?
  createdAt   DateTime @default(now())
}

model Skills {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  logo String
}

model Work {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  company_name String
  start_date   String
  end_date     String
  skills       Json?
  description  String?
  createdAt    DateTime @default(now())
}

model Education {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  user           User   @relation(fields: [userId], references: [id])
  userId         String @db.ObjectId
  institute_name String
  degree         String
  study          String
  start_year     String
  end_year       String
}
